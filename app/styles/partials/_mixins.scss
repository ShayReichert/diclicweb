@import "./variables";
@import "./functions";

// ----- GENERAL ----- //

@mixin default-content-style() {
  h2 {
    @include fluid-font(25px, 45px);
    margin: 8rem 0 3rem 0;

    @include devices(large_tablet) {
      text-wrap: balance;
    }
  }

  h3 {
    @include fluid-font(20px, 30px);
    margin: 4rem 0 1.5rem 3rem;

    @include devices(large_tablet) {
      text-wrap: balance;
    }

    @include devices(large_tablet) {
      margin: 4rem 0 1.5rem 0;
    }
  }

  p,
  ul {
    @include fluid-font(16px, $font-size-body);
    margin: 0 0 3rem 3rem;
    line-height: 1.3;

    @include devices(large_tablet) {
      margin: 1.5rem 0 1rem 0;
    }

    li {
      list-style: disc;
      margin: 2rem 0 2rem 2rem;
    }
  }

  a {
    @include hover-underline($offset: -1px);
  }
}

// ----- MEDIA QUERIES ----- //

@mixin devices($breakpoint) {
  @if $breakpoint == min_large_screen {
    @media only screen and (min-width: $min_large_screen) {
      @content;
    }
  }

  @if $breakpoint == desktop {
    @media only screen and (max-width: $desktop) {
      @content;
    }
  }

  @if $breakpoint == laptop {
    @media only screen and (max-width: $laptop) {
      @content;
    }
  }

  @if $breakpoint == large_tablet {
    @media only screen and (max-width: $large_tablet) {
      @content;
    }
  }

  @if $breakpoint == tablet {
    @media only screen and (max-width: $tablet) {
      @content;
    }
  }

  @if $breakpoint == mobile {
    @media only screen and (max-width: $mobile) {
      @content;
    }
  }
}

// ----- SIZES ----- //

@mixin fluid-font($min-font-size, $max-font-size, $min-vw: $mobile, $max-vw: $desktop) {
  // Source : https://gist.github.com/mvsde/7c66cdde4308ed155f53f7002433254c
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }

      @media (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin size($width: 100%, $height: $width) {
  width: $width;
  height: $height;
}

// ----- PSEUDO ELEMENTS ----- //

@mixin before($width: 1rem, $height: $width) {
  &:before {
    content: "";
    width: $width;
    height: $height;

    @content;
  }
}

@mixin after($width: 1rem, $height: $width) {
  &:after {
    content: "";
    width: $width;
    height: $height;

    @content;
  }
}

// ----- COMPONENTS ----- //

@mixin button() {
  --font-size: 18px;
  --duration: 0.44s;
  --move-hover: -4px;
  --font-shadow: var(--font-size);

  display: inline-block;
  padding: 1.3rem 5rem;
  border-radius: 50px;
  border: 1px solid $white;
  background-color: $primary-color;
  color: $white;
  text-decoration: none;
  text-align: center;
  line-height: 1;
  font-size: var(--font-size);
  cursor: pointer;

  div {
    display: flex;
    overflow: hidden;
    text-shadow: 0 var(--font-shadow) 0 $white;
    span {
      display: block;
      backface-visibility: hidden;
      font-style: normal;
      transition: transform var(--duration) ease;
      transform: translateY(var(--m)) translateZ(0);
      $i: 1;
      @while $i < 12 {
        &:nth-child(#{$i}) {
          transition-delay: $i / 20 + s;
        }
        $i: $i + 1;
      }
    }
  }

  &:hover {
    --y: var(--move-hover);
    span {
      --m: calc(var(--font-size) * -1);
    }
  }
}

@mixin underline($width: 40%, $height: 2.5rem, $has_animation: false, $delay: 0s) {
  @include after($width, $height) {
    position: absolute;
    background-color: $accent-color;
    z-index: -1;
    border-radius: 1px;

    @content;

    @if $has_animation {
      @include underline-animation($delay);
    }
  }
}

@mixin hover-underline($width: 100%, $height: 1px, $offset: -3px, $color: $primary-color) {
  position: relative;

  @include after($width, $height) {
    position: absolute;
    top: auto;
    bottom: $offset;
    right: 0;
    left: 0;
    background-color: $color;
    transition: transform 0.3s ease;
    transform-origin: left;
  }

  &:hover {
    &:after {
      transform: scaleX(0);
    }
  }
}

// @mixin hover-highlight($height: 2.3rem, $offset: 5px) {
//   position: relative;
//   text-decoration: underline;
//   text-underline-offset: $offset;

//   @include underline(100%, $height) {
//     transform: scaleX(0);
//     transform-origin: left;
//     right: 0;
//     top: auto;
//     bottom: -2px;
//     transition: transform 0.3s ease;
//   }

//   &:hover {
//     &:after {
//       transform: scaleX(1);
//     }
//   }
// }

@mixin border($width: 5px, $color: $secondary-color, $radius: 15px) {
  border: $width solid $color;
  border-radius: $radius;
}

// ----- ANIMATIONS ----- //

@mixin underline-animation($delay) {
  animation: underline-enter 0.45s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  animation-delay: $delay;
  transform-origin: left;

  @keyframes underline-enter {
    0% {
      transform: scaleX(0);
    }
    100% {
      transform: scaleX(1);
    }
  }
}

@mixin title-fade-in-up($delay: 0s, $translateY: 100%) {
  span {
    display: inline-block;
    transform: translateY($translateY);
    animation: title-fade-in 0.6s cubic-bezier(0.63, 0.5, 0.62, 1.2) forwards;
    animation-delay: $delay;
  }

  @keyframes title-fade-in {
    0% {
      transform: translateY($translateY);
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
}

// ----- TOOLS ----- //

@mixin hidden() {
  position: absolute;
  left: -9999px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

@mixin wrapper-image-fill($width: 100rem, $height: $width, $full_height: false) {
  @include size($width, $height);
  position: relative;
  overflow: hidden;
  margin: auto;

  @content;

  img {
    @if $full_height {
      width: auto !important;
    } @else {
      height: auto !important;
    }
    left: 50% !important;
    top: 50% !important;
    transform: translateX(-50%) translateY(-50%);
  }
}
